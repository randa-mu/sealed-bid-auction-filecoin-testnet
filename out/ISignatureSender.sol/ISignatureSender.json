{"abi":[{"type":"function","name":"fulfilSignatureRequest","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"},{"name":"signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getPublicKey","inputs":[],"outputs":[{"name":"","type":"uint256[2]","internalType":"uint256[2]"},{"name":"","type":"uint256[2]","internalType":"uint256[2]"}],"stateMutability":"view"},{"type":"function","name":"getPublicKeyBytes","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getRequestInFlight","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct TypesLib.SignatureRequest","components":[{"name":"message","type":"bytes","internalType":"bytes"},{"name":"messageHash","type":"bytes","internalType":"bytes"},{"name":"condition","type":"bytes","internalType":"bytes"},{"name":"schemeID","type":"string","internalType":"string"},{"name":"callback","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"isInFlight","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"requestSignature","inputs":[{"name":"schemeID","type":"string","internalType":"string"},{"name":"message","type":"bytes","internalType":"bytes"},{"name":"condition","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"fulfilSignatureRequest(uint256,bytes)":"5eab2b20","getPublicKey()":"2e334452","getPublicKeyBytes()":"acae9fee","getRequestInFlight(uint256)":"44880e1e","isInFlight(uint256)":"cd802c91","requestSignature(string,bytes,bytes)":"95b8d073"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfilSignatureRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicKey\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPublicKeyBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"getRequestInFlight\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"messageHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"condition\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"schemeID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"internalType\":\"struct TypesLib.SignatureRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"isInFlight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schemeID\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"condition\",\"type\":\"bytes\"}],\"name\":\"requestSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfilSignatureRequest(uint256,bytes)\":{\"details\":\"Completes the signing process for the request identified by `requestID`. The signature should be valid for the originally requested message.\",\"params\":{\"requestID\":\"The unique identifier of the signature request being fulfilled.\",\"signature\":\"The generated signature, provided as a byte array.\"}},\"getPublicKey()\":{\"details\":\"Returns the public key as two elliptic curve points.\",\"returns\":{\"_0\":\"Two pairs of coordinates representing the public key points on the elliptic curve.\"}},\"getPublicKeyBytes()\":{\"details\":\"Returns the public key as bytes.\",\"returns\":{\"_0\":\"Bytes string representing the public key points on the elliptic curve.\"}},\"getRequestInFlight(uint256)\":{\"params\":{\"requestID\":\"The unique identifier of the signature request.\"},\"returns\":{\"_0\":\"The corresponding SignatureRequest struct if the request is still in flight, otherwise struct with zero values.\"}},\"isInFlight(uint256)\":{\"details\":\"Determines whether the specified `requestID` is still pending.\",\"params\":{\"requestID\":\"The unique identifier of the signature request.\"},\"returns\":{\"_0\":\"True if the request is still in flight, otherwise false.\"}},\"requestSignature(string,bytes,bytes)\":{\"details\":\"Initiates a request for signing the provided `message` under the specified `schemeID`. The request may include certain conditions that need to be met.\",\"params\":{\"condition\":\"Conditions that must be satisfied for the signature request, provided as a byte array.\",\"message\":\"The message to be signed, provided as a byte array.\",\"schemeID\":\"The identifier of the signature scheme to be used.\"},\"returns\":{\"_0\":\"The unique request ID assigned to this signature request.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fulfilSignatureRequest(uint256,bytes)\":{\"notice\":\"Fulfills a signature request by providing the corresponding signature.\"},\"getPublicKey()\":{\"notice\":\"Retrieves the public key associated with the signature process.\"},\"getPublicKeyBytes()\":{\"notice\":\"Retrieves the public key associated with the signature process.\"},\"getRequestInFlight(uint256)\":{\"notice\":\"Returns request data if a signature request is still in flight.\"},\"isInFlight(uint256)\":{\"notice\":\"Checks if a signature request is still in flight.\"},\"requestSignature(string,bytes,bytes)\":{\"notice\":\"Requests a digital signature for a given message using a specified signature scheme.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/blocklock-solidity/src/interfaces/ISignatureSender.sol\":\"ISignatureSender\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@blocklock-solidity/src/=lib/blocklock-solidity/src/\",\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":blocklock-solidity/=lib/blocklock-solidity/\",\":config/=config/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/blocklock-solidity/src/interfaces/ISignatureSender.sol\":{\"keccak256\":\"0x283e15f038feccefc409cd945f58f45a5ae7fc1f6fb4600dc6eb729feb37357d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6fe8072046d3df4c24dacd3e215ff95293df216ed234029d062938af5f75b0b8\",\"dweb:/ipfs/Qma5SJha87HouGPWxApDXtcNw3fEmyoHVFdvnjE2tPMEgB\"]},\"lib/blocklock-solidity/src/libraries/BLS.sol\":{\"keccak256\":\"0x2da1804b02071947b31a69bdd567291638316b320368fc29bc0b13be9a129578\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://362d0c8f87d1ea62408266c30bbaa7a467deaee057846277b3d449f527545e1f\",\"dweb:/ipfs/QmToy3p41CJVxBWQEdmJFpCkb3cXWhTgwhJRWrid9wCVaz\"]},\"lib/blocklock-solidity/src/libraries/ModExp.sol\":{\"keccak256\":\"0x40964e060f2e7229e66dc1698e11503ff1e3ab94106971192f4f1c49622b2feb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05d1962cbeb754479575daa623c8d27669f31248d0b1a1e2c13dcc91c088837e\",\"dweb:/ipfs/QmZVbLHadGSW8Gk7MBbVP8EysyGFEb1Unfbv3kjsWHv1us\"]},\"lib/blocklock-solidity/src/libraries/TypesLib.sol\":{\"keccak256\":\"0x61ac15e536fbef7cd84145322fcf17d462e9b8a0c6838285ae934c7bed0173f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://853224323e7f3357f8de593b07c3ea487d4d6bd8c23251d1fe6ba9fc257a80a7\",\"dweb:/ipfs/QmTaUQNHTT3PtYL1nL4d91NCWU1GbQRek19c1xE1tiZTMu\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"fulfilSignatureRequest"},{"inputs":[],"stateMutability":"view","type":"function","name":"getPublicKey","outputs":[{"internalType":"uint256[2]","name":"","type":"uint256[2]"},{"internalType":"uint256[2]","name":"","type":"uint256[2]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getPublicKeyBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRequestInFlight","outputs":[{"internalType":"struct TypesLib.SignatureRequest","name":"","type":"tuple","components":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"messageHash","type":"bytes"},{"internalType":"bytes","name":"condition","type":"bytes"},{"internalType":"string","name":"schemeID","type":"string"},{"internalType":"address","name":"callback","type":"address"}]}]},{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}],"stateMutability":"view","type":"function","name":"isInFlight","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"string","name":"schemeID","type":"string"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"condition","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"requestSignature","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"fulfilSignatureRequest(uint256,bytes)":{"details":"Completes the signing process for the request identified by `requestID`. The signature should be valid for the originally requested message.","params":{"requestID":"The unique identifier of the signature request being fulfilled.","signature":"The generated signature, provided as a byte array."}},"getPublicKey()":{"details":"Returns the public key as two elliptic curve points.","returns":{"_0":"Two pairs of coordinates representing the public key points on the elliptic curve."}},"getPublicKeyBytes()":{"details":"Returns the public key as bytes.","returns":{"_0":"Bytes string representing the public key points on the elliptic curve."}},"getRequestInFlight(uint256)":{"params":{"requestID":"The unique identifier of the signature request."},"returns":{"_0":"The corresponding SignatureRequest struct if the request is still in flight, otherwise struct with zero values."}},"isInFlight(uint256)":{"details":"Determines whether the specified `requestID` is still pending.","params":{"requestID":"The unique identifier of the signature request."},"returns":{"_0":"True if the request is still in flight, otherwise false."}},"requestSignature(string,bytes,bytes)":{"details":"Initiates a request for signing the provided `message` under the specified `schemeID`. The request may include certain conditions that need to be met.","params":{"condition":"Conditions that must be satisfied for the signature request, provided as a byte array.","message":"The message to be signed, provided as a byte array.","schemeID":"The identifier of the signature scheme to be used."},"returns":{"_0":"The unique request ID assigned to this signature request."}}},"version":1},"userdoc":{"kind":"user","methods":{"fulfilSignatureRequest(uint256,bytes)":{"notice":"Fulfills a signature request by providing the corresponding signature."},"getPublicKey()":{"notice":"Retrieves the public key associated with the signature process."},"getPublicKeyBytes()":{"notice":"Retrieves the public key associated with the signature process."},"getRequestInFlight(uint256)":{"notice":"Returns request data if a signature request is still in flight."},"isInFlight(uint256)":{"notice":"Checks if a signature request is still in flight."},"requestSignature(string,bytes,bytes)":{"notice":"Requests a digital signature for a given message using a specified signature scheme."}},"version":1}},"settings":{"remappings":["@blocklock-solidity/src/=lib/blocklock-solidity/src/","@ds-test/=lib/forge-std/lib/ds-test/src/","@forge-std/=lib/forge-std/src/","@openzeppelin/contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","blocklock-solidity/=lib/blocklock-solidity/","config/=config/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/blocklock-solidity/src/interfaces/ISignatureSender.sol":"ISignatureSender"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/blocklock-solidity/src/interfaces/ISignatureSender.sol":{"keccak256":"0x283e15f038feccefc409cd945f58f45a5ae7fc1f6fb4600dc6eb729feb37357d","urls":["bzz-raw://6fe8072046d3df4c24dacd3e215ff95293df216ed234029d062938af5f75b0b8","dweb:/ipfs/Qma5SJha87HouGPWxApDXtcNw3fEmyoHVFdvnjE2tPMEgB"],"license":"MIT"},"lib/blocklock-solidity/src/libraries/BLS.sol":{"keccak256":"0x2da1804b02071947b31a69bdd567291638316b320368fc29bc0b13be9a129578","urls":["bzz-raw://362d0c8f87d1ea62408266c30bbaa7a467deaee057846277b3d449f527545e1f","dweb:/ipfs/QmToy3p41CJVxBWQEdmJFpCkb3cXWhTgwhJRWrid9wCVaz"],"license":"MIT"},"lib/blocklock-solidity/src/libraries/ModExp.sol":{"keccak256":"0x40964e060f2e7229e66dc1698e11503ff1e3ab94106971192f4f1c49622b2feb","urls":["bzz-raw://05d1962cbeb754479575daa623c8d27669f31248d0b1a1e2c13dcc91c088837e","dweb:/ipfs/QmZVbLHadGSW8Gk7MBbVP8EysyGFEb1Unfbv3kjsWHv1us"],"license":"MIT"},"lib/blocklock-solidity/src/libraries/TypesLib.sol":{"keccak256":"0x61ac15e536fbef7cd84145322fcf17d462e9b8a0c6838285ae934c7bed0173f6","urls":["bzz-raw://853224323e7f3357f8de593b07c3ea487d4d6bd8c23251d1fe6ba9fc257a80a7","dweb:/ipfs/QmTaUQNHTT3PtYL1nL4d91NCWU1GbQRek19c1xE1tiZTMu"],"license":"MIT"}},"version":1},"id":18}