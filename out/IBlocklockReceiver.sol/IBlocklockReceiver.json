{"abi":[{"type":"function","name":"receiveBlocklock","inputs":[{"name":"requestID","type":"uint256","internalType":"uint256"},{"name":"decryptionKey","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"receiveBlocklock(uint256,bytes)":"5d941802"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"decryptionKey\",\"type\":\"bytes\"}],\"name\":\"receiveBlocklock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveBlocklock(uint256,bytes)\":{\"details\":\"This function is called to provide the blocklock decryption generated for a given request ID. It is intended to be called by a trusted source that provides the decryption key.\",\"params\":{\"decryptionKey\":\"The generated random value, provided as a `bytes` type.\",\"requestID\":\"The unique identifier of the blocklock request.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveBlocklock(uint256,bytes)\":{\"notice\":\"Receives a blocklock decryption key associated with a specific request.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/blocklock-solidity/src/interfaces/IBlocklockReceiver.sol\":\"IBlocklockReceiver\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@blocklock-solidity/src/=lib/blocklock-solidity/src/\",\":@ds-test/=lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/forge-std/src/\",\":@openzeppelin/contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":blocklock-solidity/=lib/blocklock-solidity/\",\":config/=config/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/blocklock-solidity/src/interfaces/IBlocklockReceiver.sol\":{\"keccak256\":\"0xec2171acd3412ea32c33131f3221ef32c2e483eb411e7fa32f6e69ff129ea152\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1dcdea328e48b3d85b4609682a40c89bd6d590e9e1e83ee43972181db767981c\",\"dweb:/ipfs/Qmdx3WBx1ymag9zBjZLC38ZLc1AzMZcCbE2ruJdpCXMQ3X\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"requestID","type":"uint256"},{"internalType":"bytes","name":"decryptionKey","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receiveBlocklock"}],"devdoc":{"kind":"dev","methods":{"receiveBlocklock(uint256,bytes)":{"details":"This function is called to provide the blocklock decryption generated for a given request ID. It is intended to be called by a trusted source that provides the decryption key.","params":{"decryptionKey":"The generated random value, provided as a `bytes` type.","requestID":"The unique identifier of the blocklock request."}}},"version":1},"userdoc":{"kind":"user","methods":{"receiveBlocklock(uint256,bytes)":{"notice":"Receives a blocklock decryption key associated with a specific request."}},"version":1}},"settings":{"remappings":["@blocklock-solidity/src/=lib/blocklock-solidity/src/","@ds-test/=lib/forge-std/lib/ds-test/src/","@forge-std/=lib/forge-std/src/","@openzeppelin/contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","blocklock-solidity/=lib/blocklock-solidity/","config/=config/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/blocklock-solidity/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/blocklock-solidity/src/interfaces/IBlocklockReceiver.sol":"IBlocklockReceiver"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/blocklock-solidity/src/interfaces/IBlocklockReceiver.sol":{"keccak256":"0xec2171acd3412ea32c33131f3221ef32c2e483eb411e7fa32f6e69ff129ea152","urls":["bzz-raw://1dcdea328e48b3d85b4609682a40c89bd6d590e9e1e83ee43972181db767981c","dweb:/ipfs/Qmdx3WBx1ymag9zBjZLC38ZLc1AzMZcCbE2ruJdpCXMQ3X"],"license":"MIT"}},"version":1},"id":11}